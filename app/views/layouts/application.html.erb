<!DOCTYPE html>
<html>
  <head>
    <title>nftpets</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    <script type="x-shader/x-vertex" id="vertexshader">

        varying vec2 vUv;

        void main() {

          vUv = uv;

          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

        }

      </script>

      <script type="x-shader/x-fragment" id="fragmentshader">

        uniform sampler2D baseTexture;
        uniform sampler2D bloomTexture;

        varying vec2 vUv;

        void main() {

          gl_FragColor = ( texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );

        }

      </script>

      <script type="module">
			import * as THREE from '<%=javascript_url 'three.module' %>';
      import { GLTFLoader } from '<%=javascript_url 'GLTFLoader' %>';

            const ENTIRE_SCENE = 0, BLOOM_SCENE = 1;

            const bloomLayer = new THREE.Layers();
            bloomLayer.set( BLOOM_SCENE );

            const params = {
              exposure: 10,
              bloomStrength: 5,
              bloomThreshold: 0,
              bloomRadius: 0,
              scene: "Scene with Glow"
            };


        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x001110);
				scene.fog = new THREE.FogExp2( 0x001110, 0.0011 );

        const camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000 );

        const renderer = new THREE.WebGLRenderer({antialias: true});

        const boxGeometry = new THREE.SphereGeometry(3,9,8);
        const boxMaterial = new THREE.MeshBasicMaterial( { color: 0x73F8ED,
          wireframe: true, opacity: 0.8, transparent: true  } );
        const planet = new THREE.Mesh( boxGeometry, boxMaterial );
        scene.add( planet );

				const loader = new GLTFLoader();
        loader.load('<%=javascript_url 'lpolycat.gltf' %>', function ( gltf ) {

                      const cat = new THREE.Mesh(gltf.scene.children[0].geometry, boxMaterial);

                      cat.rotation.y-=1.2;
                      cat.position.y+=2.3;
                      cat.scale.x*=0.3;
                      cat.scale.y*=0.3;
                      cat.scale.z*=0.3;
                      scene.add(cat);
        						} );

        const moons = [];
        const rand = THREE.MathUtils.randFloatSpread;
        for ( let i = 0; i < 12; i ++ ) {

          const moonGeo = new THREE.SphereGeometry(rand(4),
           5+Math.round(rand(5)),
           5+Math.round(rand(5)));
          const moon = new THREE.Mesh( moonGeo, boxMaterial );
          moons.push(moon);
          scene.add( moon );
        }


        const vertices = [];

        for ( let i = 0; i < 20000; i ++ ) {

          const x = rand( 2000 )^2;
          const y = rand( 2000 )^2;
          const z = rand( 2000 )^2;

          vertices.push( x, y, z );

        }

        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );

        const material = new THREE.PointsMaterial( { color: 0x73F8ED } );

        const points = new THREE.Points( geometry, material );

        scene.add( points );
        camera.position.z = 10;
        camera.position.y = 3;
        camera.position.x = -4;

        const animate = function () {
          requestAnimationFrame( animate );
          moons.forEach((moon,i) => {
            const r = moon.geometry.parameters.radius;
            moon.position.z = Math.sin(r*Date.now()/10e3)*2*(r*10);
            moon.position.x = Math.cos(r*Date.now()/10e3)*3*(r*10);
          });

          scene.rotation.x += 0.0003;
          scene.rotation.y += 0.0002;

          renderer.render( scene, camera );
        };

        animate();
window.renderer = renderer;
</script>
</head>
<body>
        <script type="module">
        renderer.setSize( window.innerWidth, window.innerHeight );
        document.body.appendChild( window.renderer.domElement );
      </script>


<div id="win">
  <div class="login">
  <% if logged_in? %>
    YOU:
      <%= link_to current_user.name, '/users/'+current_user.id.to_s %>
      / <%= link_to "mail", '/messages/'%>
      / <%= link_to "logout", '/logout'%>
  <% else %>
    <%= link_to "login", '/login' %> /
    <%= link_to "sign up", '/users/new' %>
  <%end%>
  <br>
  <%=
   space_time DateTime.now #magic time
  %>
  </div>
  <h1><%= link_to "nftpets/", '/' %><%= yield :path %></h1>

    <div id="winb">
      <% if flash.notice %>
        <div id="notice"><%=flash.notice %></div>
      <% end %>
    <%= yield %>
    <br>
    <div id="foot">
      The N.F.T. Pet System is made possible by a grant from
      The Society to Protect Neptunian Furbabies
      and by contributions from users like you.
    </div>
    </div>
    </div>
    <%= javascript_include_tag "https://twemoji.maxcdn.com/v/latest/twemoji.min.js" %>
    <script>
     //twemoji.parse(document.getElementById('win'));
     //twemoji.parse(document.getElementById('winb'));
    </script>

    <script>
      mi=document.getElementsByClassName('maili');
      for (i=0; i<mi.length; i++) {
        mi[i].onclick = (function(e){
          e=this.children[0];
          while(e!==undefined){
            e.click();
            e=e.children[0];
          }
        });
      }
    </script>

  </body>
</html>
