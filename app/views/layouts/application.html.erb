<!DOCTYPE html>
<html>
<head>
  <title>nftpets</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>

  <script type="module">
    import * as THREE from '<%=javascript_url 'three.module' %>';
    //import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';

    import { GLTFLoader } from '<%=javascript_url 'GLTFLoader' %>';


    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x001110);
    scene.fog = new THREE.FogExp2( 0x001110, 0.0011 );
    const light = new THREE.PointLight( 0x73F8ED, 0.6, );
    light.position.x=-10;
    light.position.y=1;
    scene.add( light );

    const camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000 );

    const renderer = new THREE.WebGLRenderer({antialias: true});

    const boxGeometry = new THREE.SphereGeometry(3,9,8);
    const boxMaterial = new THREE.MeshBasicMaterial( { color: 0x73F8ED,
      wireframe: true, opacity: 0.8, transparent: true  } );

      const phong = new THREE.MeshPhongMaterial( {
        color: 0x73F8ED,
        shininess: 100,
        emissive: 0x001515
      } );

      const rand = THREE.MathUtils.randFloatSpread;
      const stars = [];
      for ( let i = 0; i < 20000; i ++ ) {
        const x = rand( 2000 )^2;
        const y = rand( 2000 )^2;
        const z = rand( 2000 )^2;
        stars.push( x, y, z );
      }
      const geometry = new THREE.BufferGeometry();
      geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( stars, 3 ) );
      const material = new THREE.PointsMaterial( { color: 0x73F8ED } );
      const starsMesh = new THREE.Points( geometry, material );
      scene.add( starsMesh );
      const moons = [];
      for ( let i = 0; i < 12; i ++ ) {
        const moonGeo = new THREE.SphereGeometry(2+rand(4),
        5+Math.round(rand(5)),
        5+Math.round(rand(5)));
        const moon = new THREE.Mesh( moonGeo, boxMaterial );
        moons.push(moon);
        scene.add( moon );
      }


      const planet = new THREE.Mesh( boxGeometry, boxMaterial );
      scene.add( planet );

      const loader = new GLTFLoader();
      loader.load('<%=image_url 'nftpets.gltf' %>', function ( gltf ) {

        let catgeo = gltf.scene.children[0].geometry;
        const cat = new THREE.Mesh(catgeo, boxMaterial);
        let catmesh = new THREE.Mesh( catgeo, phong );
        catmesh.scale.x=.98;
        cat.add(catmesh);
        scene.add(cat);

        let coingeo = gltf.scene.children[1].geometry;
        const coin = new THREE.Mesh(coingeo, boxMaterial);
        let coinmesh = new THREE.Mesh( coingeo, phong );
        coinmesh.scale.y=.95;
        coin.add(coinmesh);
        scene.add(coin);

        let handgeo = gltf.scene.children[2].geometry;
        const hand = new THREE.Mesh(handgeo, boxMaterial);
        let handmesh = new THREE.Mesh( handgeo, phong );
        handmesh.scale.y=.98;
        hand.add(handmesh);
        scene.add(hand);
        hand.scale.x=.4;
        hand.scale.y=.4;
        hand.scale.z=.4;

        let egggeo = gltf.scene.children[3].geometry;
        const egg = new THREE.Mesh(egggeo, boxMaterial);
        let eggmesh = new THREE.Mesh( egggeo, phong );
        eggmesh.scale.y=.98;
        eggmesh.scale.z=.98;
        egg.add(eggmesh);
        scene.add(egg);

        const updateModels = function(){
          requestAnimationFrame(updateModels);
          coin.rotation.z += 0.01;
            egg.position.y=999;
          if(renderer.flyTo=="coin") {
            scene.position.x+=(coin.position.x-scene.position.x)/4.0;
            scene.position.y+=(coin.position.y-scene.position.y)/4.0;
            scene.position.z+=(coin.position.z-scene.position.z-2)/4.0;
          }
          if(renderer.flyTo=="cat" || renderer.flyTo=="hand") {
            cat.position.y+=(1.02-cat.position.y)/4.0;
            cat.scale.x+=(0.6-cat.scale.x)/4.0;
            cat.scale.y+=(0.6-cat.scale.y)/4.0;
            cat.scale.z+=(0.6-cat.scale.z)/4.0;
            coin.rotation.z=0;
            coin.rotation.x=-coin.rotation.x/4.0;

            scene.position.x+=(0.5+cat.position.x-scene.position.x)/4.0;
            scene.position.y+=(cat.position.y-scene.position.y-1.9)/4.0;
            scene.position.z+=(cat.position.z-scene.position.z-2.75)/4.0;
          } else if (renderer.flyTo=="stray") {
            cat.position.y+=(30-cat.position.y)/4.0;
            cat.rotation.z+=Math.sin(Date.now()/3e5)/3e2;
            cat.rotation.y+=Math.cos(Date.now()/1e5)/2e2;
            cat.rotation.x+=Math.sin(Date.now()/2e5)/3e2;
            scene.position.x+=(-cat.position.x-scene.position.x)/4.0;
            scene.position.y+=(-cat.position.y-scene.position.y+2)/4.0;
            scene.position.z+=(-cat.position.z-scene.position.z-8)/4.0;
          } else if (renderer.flyTo=="egg") {
            egg.position.y=0.59;
            cat.position.y=999;
            coin.rotation.z=0;
            coin.rotation.x=Math.PI
            scene.position.x+=(-egg.position.x-scene.position.x)/4.0;
            scene.position.y+=(-egg.position.y-scene.position.y-.1)/4.0;
            scene.position.z+=(-egg.position.z-scene.position.z-2.5)/4.0;
          } else {
            cat.position.y+=(4.25-cat.position.y)/3.0;
            cat.scale.x+=(1-cat.scale.x)/4.0;
            cat.scale.y+=(1-cat.scale.y)/4.0;
            cat.scale.z+=(1-cat.scale.z)/4.0;
            cat.rotation.z=0;
            cat.rotation.x=0;
            coin.rotation.x+=(-Math.PI/2-coin.rotation.x)/4.0;
          }
          if (renderer.flyTo=="hand") {
          cat.rotation.y=0;
          scene.rotation.x+=5e-4
          hand.rotation.z=1.1;
          hand.rotation.x=-1.3;
          hand.rotation.y=1;
            hand.position.y+=(1.38+Math.cos(Date.now()/5e2)/6-hand.position.y)/4.0;
            hand.position.x+=(0.43+Math.cos(Date.now()/5e2)/8-hand.position.x)/4.0;
            hand.position.z+=(0.4+Math.sin(Date.now()/5e2)/2-hand.position.z)/4.0;
          } else {
            hand.position.y+=(999-hand.position.y)/4.0;
          }
        };updateModels();

      });


      renderer.flyToOrigin=true;
      const animate = function () {
        requestAnimationFrame( animate );
        moons.forEach((moon,i) => {
          const r = moon.geometry.parameters.radius;
          moon.position.z = Math.sin(r*Date.now()/1e5)*2*(r*10);
          moon.position.x = Math.cos(r*Date.now()/1e5)*3*(r*10);
        });

        scene.rotation.z = -.01+Math.cos(Date.now()/3e4)/20;
        scene.rotation.y = -.6+Math.sin(Date.now()/9e4);

        if(renderer.flyTo=="origin") {
          scene.position.x+=(2.0-scene.position.x)/2.0;
          scene.position.y+=(-2.0-scene.position.y)/2.0;
          scene.position.z+=(-7.0-scene.position.z)/2.0;
            camera.rotation.y=0
        } else if (renderer.flyTo=="moon") {
          scene.position.x+=(-moons[1].position.x-scene.position.x)/3.0;
          scene.position.y+=(-moons[1].position.y-scene.position.y)/3.0;
          scene.position.z+=(-moons[1].position.z-scene.position.z-15)/3.0;
          camera.lookAt(scene.position);
        } else {
        }
        renderer.render( scene, camera );
      };

      scene.rotation.y = -Math.random();
      animate();

      window.renderer = renderer;
    </script>
  </head>
  <body>
    <script type="module">
      renderer.setSize( window.innerWidth, window.innerHeight );
      renderer.flyTo="origin";
      document.body.appendChild( window.renderer.domElement );
    </script>


    <div id="win">
      <div id="bar">
        <div class="login">
          <% if logged_in? %>
          <%= link_to current_user.id.to_s+':)'+current_user.name, '/users/'+current_user.id.to_s %>
          | <%= link_to "mail", '/messages/'%>
          | <%= link_to "logout", '/logout'%>
          <% else %>
          <%= link_to "login", '/login' %> /
          <%= link_to "sign up", '/users/new' %>
          <%end%>
          <br>
          <%=
          space_time DateTime.now #magic time
          %>
        </div>
        <h1><%= link_to "nftpets/", '/' %><%= yield :path %></h1>
      </div>

      <div id="winb">
        <% if flash.notice %>
        <div id="notice"><%=flash.notice %></div>
        <% end %>
        <%= yield %>
        <br>
        <div id="foot">
          <a href="https://patreon.com/happyfeelscompany">
            The N.F.T. Pet System is made possible by a grant from
            The Society to Protect Neptunian Furbabies
            and by contributions from users like you.
          </a>
        </div>
      </div>
    </div>
    <%# javascript_include_tag "https://twemoji.maxcdn.com/v/latest/twemoji.min.js"
    %>
    <script>
      //twemoji.parse(document.getElementById('win'));
      //twemoji.parse(document.getElementById('winb'));
    </script>

    <script>
      mi=document.getElementsByClassName('maili');
      for (i=0; i<mi.length; i++) {
        mi[i].onclick = (function(e){
          e=this.children[0];
          while(e!==undefined){
            e.click();
            e=e.children[0];
          }
        });
      }
    </script>
  </body>
  </html>
